// Generated by psc-bundle 0.7.4.1
var PS = { };
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.forE = function (lo) {
    return function (hi) {
      return function (f) {
        return function () {
          for (var i = lo; i < hi; i++) {
            f(i)();
          }
        };
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Semiring -------------------------------------------------------------------

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };

  exports.numAdd = function (n1) {
    return function (n2) {
      return n1 + n2;
    };
  };

  exports.numMul = function (n1) {
    return function (n2) {
      return n1 * n2;
    };
  };

  exports.numSub = function (n1) {
    return function (n2) {
      return n1 - n2;
    };
  };                                          

  //- BooleanAlgebra -------------------------------------------------------------

  exports.boolOr = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolAnd = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Prelude"];
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var Category = function (__superclass_Prelude$dotSemigroupoid_0, id) {
      this["__superclass_Prelude.Semigroupoid_0"] = __superclass_Prelude$dotSemigroupoid_0;
      this.id = id;
  };
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var Ring = function (__superclass_Prelude$dotSemiring_0, sub) {
      this["__superclass_Prelude.Semiring_0"] = __superclass_Prelude$dotSemiring_0;
      this.sub = sub;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var BooleanAlgebra = function (__superclass_Prelude$dotBounded_0, conj, disj, not) {
      this["__superclass_Prelude.Bounded_0"] = __superclass_Prelude$dotBounded_0;
      this.conj = conj;
      this.disj = disj;
      this.not = not;
  };
  var Show = function (show) {
      this.show = show;
  };
  var $dollar = function (f) {
      return function (x) {
          return f(x);
      };
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                           
  var unit = {};
  var top = function (dict) {
      return dict.top;
  };
  var sub = function (dict) {
      return dict.sub;
  };
  var $minus = function (__dict_Ring_0) {
      return sub(__dict_Ring_0);
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };             
  var semiringNumber = new Semiring($foreign.numAdd, $foreign.numMul, 1.0, 0.0);
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var ringNumber = new Ring(function () {
      return semiringNumber;
  }, $foreign.numSub);
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (__dict_Applicative_2) {
      return pure(__dict_Applicative_2);
  };
  var otherwise = true;
  var one = function (dict) {
      return dict.one;
  };
  var not = function (dict) {
      return dict.not;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (__dict_Functor_5) {
      return map(__dict_Functor_5);
  };
  var id = function (dict) {
      return dict.id;
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };                
  var eq = function (dict) {
      return dict.eq;
  };
  var $eq$eq = function (__dict_Eq_7) {
      return eq(__dict_Eq_7);
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var $$const = function (a) {
      return function (_3) {
          return a;
      };
  };
  var conj = function (dict) {
      return dict.conj;
  };
  var compose = function (dict) {
      return dict.compose;
  };                                                   
  var $less$less$less = function (__dict_Semigroupoid_14) {
      return compose(__dict_Semigroupoid_14);
  };
  var $greater$greater$greater = function (__dict_Semigroupoid_15) {
      return flip(compose(__dict_Semigroupoid_15));
  };
  var categoryFn = new Category(function () {
      return semigroupoidFn;
  }, function (x) {
      return x;
  });
  var boundedBoolean = new Bounded(false, true);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var booleanAlgebraBoolean = new BooleanAlgebra(function () {
      return boundedBoolean;
  }, $foreign.boolAnd, $foreign.boolOr, $foreign.boolNot);
  var $div$eq = function (__dict_Eq_9) {
      return function (x) {
          return function (y) {
              return not(booleanAlgebraBoolean)($eq$eq(__dict_Eq_9)(x)(y));
          };
      };
  };
  var bind = function (dict) {
      return dict.bind;
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (__dict_Apply_25) {
      return apply(__dict_Apply_25);
  };
  var liftA1 = function (__dict_Applicative_26) {
      return function (f) {
          return function (a) {
              return $less$times$greater(__dict_Applicative_26["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_26)(f))(a);
          };
      };
  }; 
  var append = function (dict) {
      return dict.append;
  };
  var $less$greater = function (__dict_Semigroup_28) {
      return append(__dict_Semigroup_28);
  };
  var ap = function (__dict_Monad_30) {
      return function (f) {
          return function (a) {
              return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                  return bind(__dict_Monad_30["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                      return $$return(__dict_Monad_30["__superclass_Prelude.Applicative_0"]())(_2(_1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  var add = function (dict) {
      return dict.add;
  };
  var $plus = function (__dict_Semiring_31) {
      return add(__dict_Semiring_31);
  };
  exports["Show"] = Show;
  exports["BooleanAlgebra"] = BooleanAlgebra;
  exports["Bounded"] = Bounded;
  exports["Eq"] = Eq;
  exports["Ring"] = Ring;
  exports["Semiring"] = Semiring;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["Category"] = Category;
  exports["Semigroupoid"] = Semigroupoid;
  exports["show"] = show;
  exports["not"] = not;
  exports["disj"] = disj;
  exports["conj"] = conj;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["/="] = $div$eq;
  exports["=="] = $eq$eq;
  exports["eq"] = eq;
  exports["-"] = $minus;
  exports["sub"] = sub;
  exports["+"] = $plus;
  exports["one"] = one;
  exports["mul"] = mul;
  exports["zero"] = zero;
  exports["add"] = add;
  exports["<>"] = $less$greater;
  exports["append"] = append;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["id"] = id;
  exports[">>>"] = $greater$greater$greater;
  exports["<<<"] = $less$less$less;
  exports["compose"] = compose;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["$"] = $dollar;
  exports["unit"] = unit;
  exports["semigroupoidFn"] = semigroupoidFn;
  exports["categoryFn"] = categoryFn;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["semiringInt"] = semiringInt;
  exports["semiringNumber"] = semiringNumber;
  exports["ringNumber"] = ringNumber;
  exports["boundedBoolean"] = boundedBoolean;
  exports["booleanAlgebraBoolean"] = booleanAlgebraBoolean;
  exports["showInt"] = showInt;;
 
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];     
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["forE"] = $foreign.forE;;
 
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.ST

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifySTRef = function (ref) {
    return function (f) {
      return function () {
        /* jshint boss: true */
        return ref.value = f(ref.value);
      };
    };
  };
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["modifySTRef"] = $foreign.modifySTRef;
  exports["readSTRef"] = $foreign.readSTRef;
  exports["newSTRef"] = $foreign.newSTRef;;
 
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module DOM.Event.EventTarget

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
 
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  exports["addEventListener"] = $foreign.addEventListener;
  exports["eventListener"] = $foreign.eventListener;;
 
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  /* global exports, window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function(x) { return x; }
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;;
 
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Prelude = PS["Prelude"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Class = PS["Data.Foreign.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];     
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;
  exports["windowToEventTarget"] = windowToEventTarget;;
 
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;;
 
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  /* global exports */
  "use strict";


  // module DOM.Timer

  exports.timeout = function(time){
    return function(fn){
      return function(){
        return setTimeout(function(){
          fn();
        }, time);
      };
    };
  };

  exports.interval = function(time){
    return function(fn){
      return function(){
        return setInterval(function(){
          fn();
        }, time);
      };
    };
  };
 
})(PS["DOM.Timer"] = PS["DOM.Timer"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["DOM.Timer"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["interval"] = $foreign.interval;
  exports["timeout"] = $foreign.timeout;;
 
})(PS["DOM.Timer"] = PS["DOM.Timer"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.findIndexImpl = function (just) {
    return function (nothing) {
      return function (f) {
        return function (xs) {
          for (var i = 0, l = xs.length; i < l; i++) {
            if (f(xs[i])) return just(i);
          }
          return nothing;
        };
      };
    };
  };

  exports._deleteAt = function (just) {
    return function (nothing) {
      return function (i) {
        return function (l) {
          if (i < 0 || i >= l.length) return nothing;
          var l1 = l.slice();
          l1.splice(i, 1);
          return just(l1);
        };
      };
    };
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Foldable

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;;
 
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];     
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (b) {
      return function (f) {
          return function (_154) {
              if (_154 instanceof Nothing) {
                  return b;
              };
              if (_154 instanceof Just) {
                  return f(_154.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 26, column 1 - line 27, column 1: " + [ b.constructor.name, f.constructor.name, _154.constructor.name ]);
          };
      };
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;;
 
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];     
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldableArray = new Foldable(function (__dict_Monoid_19) {
      return function (f) {
          return function (xs) {
              return foldr(foldableArray)(function (x) {
                  return function (acc) {
                      return Prelude["<>"](__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(__dict_Monoid_19))(xs);
          };
      };
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["foldableArray"] = foldableArray;;
 
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;;
 
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];     
  var fromJust = function (_217) {
      if (_217 instanceof Data_Maybe.Just) {
          return _217.value0;
      };
      if (_217 instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 10, column 1 - line 11, column 1: " + [ _217.constructor.name ]);
  };
  exports["fromJust"] = fromJust;;
 
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];     
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });                          
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (_287) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var nubBy = function (eq) {
      return function (xs) {
          var _1053 = uncons(xs);
          if (_1053 instanceof Data_Maybe.Just) {
              return $colon(_1053.value0.head)(nubBy(eq)($foreign.filter(function (y) {
                  return !eq(_1053.value0.head)(y);
              })(_1053.value0.tail)));
          };
          if (_1053 instanceof Data_Maybe.Nothing) {
              return [  ];
          };
          throw new Error("Failed pattern match: " + [ _1053.constructor.name ]);
      };
  };
  var nub = function (__dict_Eq_3) {
      return nubBy(Prelude.eq(__dict_Eq_3));
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var $bang$bang = index;
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (_286) {
          return new Data_Maybe.Just(x);
      };
  });
  var findIndex = $foreign.findIndexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteAt = $foreign._deleteAt(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var deleteBy = function (eq) {
      return function (x) {
          return function (_292) {
              if (_292.length === 0) {
                  return [  ];
              };
              return Data_Maybe.maybe(_292)(function (i) {
                  return Data_Maybe_Unsafe.fromJust(deleteAt(i)(_292));
              })(findIndex(eq(x))(_292));
          };
      };
  };
  var $$delete = function (__dict_Eq_17) {
      return deleteBy(Prelude.eq(__dict_Eq_17));
  };
  var $bslash$bslash = function (__dict_Eq_18) {
      return function (xs) {
          return function (ys) {
              if ($$null(xs)) {
                  return [  ];
              };
              if (Prelude.otherwise) {
                  return $foreign["uncons'"](Prelude["const"](xs))(function (y) {
                      return function (ys_2) {
                          return $bslash$bslash(__dict_Eq_18)($$delete(__dict_Eq_18)(y)(xs))(ys_2);
                      };
                  })(ys);
              };
              throw new Error("Failed pattern match: " + [ xs.constructor.name, ys.constructor.name ]);
          };
      };
  };
  exports["\\\\"] = $bslash$bslash;
  exports["deleteBy"] = deleteBy;
  exports["nubBy"] = nubBy;
  exports["nub"] = nub;
  exports["deleteAt"] = deleteAt;
  exports["findIndex"] = findIndex;
  exports["index"] = index;
  exports["!!"] = $bang$bang;
  exports["uncons"] = uncons;
  exports["tail"] = tail;
  exports["head"] = head;
  exports[".."] = $dot$dot;
  exports["filter"] = $foreign.filter;
  exports["concat"] = $foreign.concat;
  exports["cons"] = $foreign.cons;
  exports["length"] = $foreign.length;;
 
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Const = function (x) {
      return x;
  };
  var getConst = function (_22) {
      return _22;
  };
  var functorConst = new Prelude.Functor(function (_32) {
      return function (_33) {
          return _33;
      };
  });
  exports["Const"] = Const;
  exports["getConst"] = getConst;
  exports["functorConst"] = functorConst;;
 
})(PS["Data.Const"] = PS["Data.Const"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Date

  exports.nowEpochMilliseconds = function () {
    return Date.now();
  };
 
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var TimeValue = function (fromHours, fromMilliseconds, fromMinutes, fromSeconds, toHours, toMilliseconds, toMinutes, toSeconds) {
      this.fromHours = fromHours;
      this.fromMilliseconds = fromMilliseconds;
      this.fromMinutes = fromMinutes;
      this.fromSeconds = fromSeconds;
      this.toHours = toHours;
      this.toMilliseconds = toMilliseconds;
      this.toMinutes = toMinutes;
      this.toSeconds = toSeconds;
  };
  var toSeconds = function (dict) {
      return dict.toSeconds;
  };
  var toMinutes = function (dict) {
      return dict.toMinutes;
  };
  var toMilliseconds = function (dict) {
      return dict.toMilliseconds;
  };
  var toHours = function (dict) {
      return dict.toHours;
  }; 
  var timeValueMilliseconds = new TimeValue(function (_104) {
      return _104 * 3600000.0;
  }, function (n) {
      return n;
  }, function (_105) {
      return _105 * 60000.0;
  }, function (_106) {
      return _106 * 1000.0;
  }, function (_101) {
      return _101 / 3600000.0;
  }, function (n) {
      return n;
  }, function (_102) {
      return _102 / 60000.0;
  }, function (_103) {
      return _103 / 1000.0;
  });          
  var semiringMilliseconds = new Prelude.Semiring(function (_72) {
      return function (_73) {
          return _72 + _73;
      };
  }, function (_74) {
      return function (_75) {
          return _74 * _75;
      };
  }, 1.0, 0.0);
  var ringMilliseconds = new Prelude.Ring(function () {
      return semiringMilliseconds;
  }, function (_76) {
      return function (_77) {
          return _76 - _77;
      };
  });
  var fromSeconds = function (dict) {
      return dict.fromSeconds;
  };
  var fromMinutes = function (dict) {
      return dict.fromMinutes;
  };
  var fromMilliseconds = function (dict) {
      return dict.fromMilliseconds;
  };
  var fromHours = function (dict) {
      return dict.fromHours;
  };
  exports["TimeValue"] = TimeValue;
  exports["fromMilliseconds"] = fromMilliseconds;
  exports["fromSeconds"] = fromSeconds;
  exports["fromMinutes"] = fromMinutes;
  exports["fromHours"] = fromHours;
  exports["toMilliseconds"] = toMilliseconds;
  exports["toSeconds"] = toSeconds;
  exports["toMinutes"] = toMinutes;
  exports["toHours"] = toHours;
  exports["semiringMilliseconds"] = semiringMilliseconds;
  exports["ringMilliseconds"] = ringMilliseconds;
  exports["timeValueMilliseconds"] = timeValueMilliseconds;;
 
})(PS["Data.Time"] = PS["Data.Time"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Data.Date"];
  var Global = PS["Global"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Time = PS["Data.Time"];
  exports["nowEpochMilliseconds"] = $foreign.nowEpochMilliseconds;;
 
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];     
  var Identity = function (x) {
      return x;
  };
  var runIdentity = function (_55) {
      return _55;
  };
  var functorIdentity = new Prelude.Functor(function (f) {
      return function (_78) {
          return f(_78);
      };
  });
  exports["Identity"] = Identity;
  exports["runIdentity"] = runIdentity;
  exports["functorIdentity"] = functorIdentity;;
 
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;

  exports.max = function (n1) {
    return function (n2) {
      return Math.max(n1, n2);
    };
  };

  exports.min = function (n1) {
    return function (n2) {
      return Math.min(n1, n2);
    };
  };                         
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Math"];
  exports["min"] = $foreign.min;
  exports["max"] = $foreign.max;
  exports["floor"] = $foreign.floor;
  exports["abs"] = $foreign.abs;;
 
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;;
 
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return Prelude[">>>"](Prelude.semigroupoidFn)(a2b)(Prelude[">>>"](Prelude.semigroupoidFn)(b2c)(c2d));
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (__dict_Profunctor_1) {
      return function (b2c) {
          return dimap(__dict_Profunctor_1)(Prelude.id(Prelude.categoryFn))(b2c);
      };
  };
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;;
 
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];
  var lens = function (s2a) {
      return function (s2b2t) {
          return function (__dict_Functor_1) {
              return function (a2fb) {
                  return function (s) {
                      return Prelude["<$>"](__dict_Functor_1)(s2b2t(s))(a2fb(s2a(s)));
                  };
              };
          };
      };
  };
  exports["lens"] = lens;;
 
})(PS["Optic.Lens"] = PS["Optic.Lens"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Data_Const = PS["Data.Const"];
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];
  var $up$dot = function (s) {
      return function (asa) {
          return Data_Const.getConst(asa(Data_Const.Const)(s));
      };
  };
  exports["^."] = $up$dot;;
 
})(PS["Optic.Getter"] = PS["Optic.Getter"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Data_Functor_Contravariant = PS["Data.Functor.Contravariant"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Optic_Internal_Setter = PS["Optic.Internal.Setter"];
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];
  var set = function (stab) {
      return function (b) {
          return function (_340) {
              return Data_Identity.runIdentity(stab(function (_341) {
                  return Data_Identity.Identity(Prelude["const"](b)(_341));
              })(_340));
          };
      };
  };
  var $dot$tilde = set;
  var over = function (__dict_Profunctor_3) {
      return function (pstab) {
          return function (pab) {
              return function (_342) {
                  return Data_Identity.runIdentity(pstab(Data_Profunctor.rmap(__dict_Profunctor_3)(Data_Identity.Identity)(pab))(_342));
              };
          };
      };
  };
  var $percent$tilde = function (__dict_Profunctor_4) {
      return over(__dict_Profunctor_4);
  };
  var $plus$tilde = function (__dict_Semiring_8) {
      return function (staa) {
          return function (a) {
              return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["+"](__dict_Semiring_8))(a));
          };
      };
  };
  var $minus$tilde = function (__dict_Ring_9) {
      return function (staa) {
          return function (a) {
              return over(Data_Profunctor.profunctorFn)(staa)(Prelude.flip(Prelude["-"](__dict_Ring_9))(a));
          };
      };
  };
  exports["set"] = set;
  exports["over"] = over;
  exports["-~"] = $minus$tilde;
  exports["+~"] = $plus$tilde;
  exports[".~"] = $dot$tilde;
  exports["%~"] = $percent$tilde;;
 
})(PS["Optic.Setter"] = PS["Optic.Setter"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Lens = PS["Optic.Lens"];
  var Optic_Prism = PS["Optic.Prism"];
  var Optic_Setter = PS["Optic.Setter"];
  var Optic_Types = PS["Optic.Types"];
  var Prelude = PS["Prelude"];     
  var $dot$dot = function (__dict_Semigroupoid_0) {
      return Prelude["<<<"](__dict_Semigroupoid_0);
  };
  exports[".."] = $dot$dot;;
 
})(PS["Optic.Core"] = PS["Optic.Core"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Optic_Getter = PS["Optic.Getter"];
  var Prelude = PS["Prelude"];
  var Optic_Core = PS["Optic.Core"];
  var Data_Const = PS["Data.Const"];     
  var Player = (function () {
      function Player() {

      };
      Player.value = new Player();
      return Player;
  })();
  var Invader = (function () {
      function Invader() {

      };
      Invader.value = new Invader();
      return Invader;
  })();
  var Boss = (function () {
      function Boss() {

      };
      Boss.value = new Boss();
      return Boss;
  })();
  var Bullet = (function () {
      function Bullet(value0) {
          this.value0 = value0;
      };
      Bullet.create = function (value0) {
          return new Bullet(value0);
      };
      return Bullet;
  })();
  var y = Optic_Lens.lens(function (_20) {
      return _20.value0.y;
  })(function (_21) {
      return function (y$prime) {
          return new Bullet((function () {
              var _48 = {};
              for (var _49 in _21.value0) {
                  if (_21.value0.hasOwnProperty(_49)) {
                      _48[_49] = _21.value0[_49];
                  };
              };
              _48.y = y$prime;
              return _48;
          })());
      };
  });
  var x = Optic_Lens.lens(function (_18) {
      return _18.value0.x;
  })(function (_19) {
      return function (x$prime) {
          return new Bullet((function () {
              var _54 = {};
              for (var _55 in _19.value0) {
                  if (_19.value0.hasOwnProperty(_55)) {
                      _54[_55] = _19.value0[_55];
                  };
              };
              _54.x = x$prime;
              return _54;
          })());
      };
  });
  var makeBullet = function (t) {
      return function (x_1) {
          return function (y_1) {
              return new Bullet({
                  type: t, 
                  x: x_1, 
                  y: y_1
              });
          };
      };
  };                                                
  var makePlayerBullet = makeBullet(Player.value);
  var eqType = new Prelude.Eq(function (_22) {
      return function (_23) {
          if (_22 instanceof Player && _23 instanceof Player) {
              return true;
          };
          if (_22 instanceof Invader && _23 instanceof Invader) {
              return true;
          };
          if (_22 instanceof Boss && _23 instanceof Boss) {
              return true;
          };
          return false;
      };
  });
  var bulletType = Optic_Lens.lens(function (_16) {
      return _16.value0.type;
  })(function (_17) {
      return function (type$prime) {
          return new Bullet((function () {
              var _62 = {};
              for (var _63 in _17.value0) {
                  if (_17.value0.hasOwnProperty(_63)) {
                      _62[_63] = _17.value0[_63];
                  };
              };
              _62.type = type$prime;
              return _62;
          })());
      };
  });
  var eqBullet = new Prelude.Eq(function (b1) {
      return function (b2) {
          return Prelude["=="](eqType)(Optic_Getter["^."](b1)(bulletType(Data_Const.functorConst)))(Optic_Getter["^."](b2)(bulletType(Data_Const.functorConst))) && (Optic_Getter["^."](b1)(x(Data_Const.functorConst)) === Optic_Getter["^."](b2)(x(Data_Const.functorConst)) && Optic_Getter["^."](b1)(y(Data_Const.functorConst)) === Optic_Getter["^."](b2)(y(Data_Const.functorConst)));
      };
  });
  exports["Bullet"] = Bullet;
  exports["Player"] = Player;
  exports["Invader"] = Invader;
  exports["Boss"] = Boss;
  exports["y"] = y;
  exports["x"] = x;
  exports["bulletType"] = bulletType;
  exports["makePlayerBullet"] = makePlayerBullet;
  exports["makeBullet"] = makeBullet;
  exports["eqType"] = eqType;
  exports["eqBullet"] = eqBullet;;
 
})(PS["Entities.Bullet"] = PS["Entities.Bullet"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Optic_Getter = PS["Optic.Getter"];
  var Prelude = PS["Prelude"];
  var Optic_Core = PS["Optic.Core"];
  var Data_Const = PS["Data.Const"];     
  var Alive = (function () {
      function Alive() {

      };
      Alive.value = new Alive();
      return Alive;
  })();
  var Shot = (function () {
      function Shot() {

      };
      Shot.value = new Shot();
      return Shot;
  })();
  var Dead = (function () {
      function Dead() {

      };
      Dead.value = new Dead();
      return Dead;
  })();
  var Invader = (function () {
      function Invader(value0) {
          this.value0 = value0;
      };
      Invader.create = function (value0) {
          return new Invader(value0);
      };
      return Invader;
  })();
  var y = Optic_Lens.lens(function (_33) {
      return _33.value0.y;
  })(function (_34) {
      return function (y$prime) {
          return new Invader((function () {
              var _95 = {};
              for (var _96 in _34.value0) {
                  if (_34.value0.hasOwnProperty(_96)) {
                      _95[_96] = _34.value0[_96];
                  };
              };
              _95.y = y$prime;
              return _95;
          })());
      };
  });
  var x = Optic_Lens.lens(function (_31) {
      return _31.value0.x;
  })(function (_32) {
      return function (x$prime) {
          return new Invader((function () {
              var _101 = {};
              for (var _102 in _32.value0) {
                  if (_32.value0.hasOwnProperty(_102)) {
                      _101[_102] = _32.value0[_102];
                  };
              };
              _101.x = x$prime;
              return _101;
          })());
      };
  });
  var status = Optic_Lens.lens(function (_37) {
      return _37.value0.status;
  })(function (_38) {
      return function (status$prime) {
          return new Invader((function () {
              var _107 = {};
              for (var _108 in _38.value0) {
                  if (_38.value0.hasOwnProperty(_108)) {
                      _107[_108] = _38.value0[_108];
                  };
              };
              _107.status = status$prime;
              return _107;
          })());
      };
  });
  var makeInvader = function (x_1) {
      return function (y_1) {
          return function (idx_1) {
              return new Invader({
                  x: x_1, 
                  y: y_1, 
                  idx: idx_1, 
                  status: Alive.value
              });
          };
      };
  };
  var idx = Optic_Lens.lens(function (_35) {
      return _35.value0.idx;
  })(function (_36) {
      return function (idx$prime) {
          return new Invader((function () {
              var _113 = {};
              for (var _114 in _36.value0) {
                  if (_36.value0.hasOwnProperty(_114)) {
                      _113[_114] = _36.value0[_114];
                  };
              };
              _113.idx = idx$prime;
              return _113;
          })());
      };
  });
  var eqStatus = new Prelude.Eq(function (_39) {
      return function (_40) {
          if (_39 instanceof Alive && _40 instanceof Alive) {
              return true;
          };
          if (_39 instanceof Shot && _40 instanceof Shot) {
              return true;
          };
          if (_39 instanceof Dead && _40 instanceof Dead) {
              return true;
          };
          return false;
      };
  });
  var eqInvader = new Prelude.Eq(function (i1) {
      return function (i2) {
          return Optic_Getter["^."](i1)(idx(Data_Const.functorConst)) === Optic_Getter["^."](i2)(idx(Data_Const.functorConst));
      };
  });
  exports["Invader"] = Invader;
  exports["Alive"] = Alive;
  exports["Shot"] = Shot;
  exports["Dead"] = Dead;
  exports["makeInvader"] = makeInvader;
  exports["status"] = status;
  exports["idx"] = idx;
  exports["y"] = y;
  exports["x"] = x;
  exports["eqStatus"] = eqStatus;
  exports["eqInvader"] = eqInvader;;
 
})(PS["Entities.Invader"] = PS["Entities.Invader"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Prelude = PS["Prelude"];
  var Data_Array = PS["Data.Array"];
  var Data_Int = PS["Data.Int"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Boss = PS["Entities.Boss"];
  var Entities_Invader = PS["Entities.Invader"];     
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Patrol = (function () {
      function Patrol(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Patrol.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Patrol(value0, value1, value2);
              };
          };
      };
      return Patrol;
  })();
  var makeRegularLevel = (function () {
      var makeInvaders = Prelude.bind(Prelude.bindArray)(Data_Array[".."](0)(7))(function (_1) {
          return Prelude.bind(Prelude.bindArray)(Data_Array[".."](0)(2))(function (_0) {
              return Prelude["return"](Prelude.applicativeArray)(Entities_Invader.makeInvader(50.0 + 75.0 * Data_Int.toNumber(_1))(100.0 + 75.0 * Data_Int.toNumber(_0))(_1 + (7 * _0 | 0) | 0));
          });
      });
      return new Patrol(makeInvaders, Right.value, 5.0);
  })();                                                                      
  var eqDirection = new Prelude.Eq(function (_47) {
      return function (_48) {
          if (_47 instanceof Left && _48 instanceof Left) {
              return true;
          };
          if (_47 instanceof Right && _48 instanceof Right) {
              return true;
          };
          return false;
      };
  });
  var invaders = Optic_Lens.lens(function (_41) {
      if (_41 instanceof Patrol) {
          return _41.value0;
      };
      throw new Error("Failed pattern match: " + [ _41.constructor.name ]);
  })(function (_42) {
      if (_42 instanceof Patrol) {
          return function (invaders$prime) {
              return new Patrol(invaders$prime, _42.value1, _42.value2);
          };
      };
      throw new Error("Failed pattern match: " + [ _42.constructor.name ]);
  });
  var dx = Optic_Lens.lens(function (_45) {
      if (_45 instanceof Patrol) {
          return _45.value2;
      };
      throw new Error("Failed pattern match: " + [ _45.constructor.name ]);
  })(function (_46) {
      if (_46 instanceof Patrol) {
          return function (dx$prime) {
              return new Patrol(_46.value0, _46.value1, dx$prime);
          };
      };
      throw new Error("Failed pattern match: " + [ _46.constructor.name ]);
  });
  var direction = Optic_Lens.lens(function (_43) {
      if (_43 instanceof Patrol) {
          return _43.value1;
      };
      throw new Error("Failed pattern match at Entities.Enemies line 28, column 1 - line 30, column 1: " + [ _43.constructor.name ]);
  })(function (_44) {
      if (_44 instanceof Patrol) {
          return function (dir$prime) {
              return new Patrol(_44.value0, dir$prime, _44.value2);
          };
      };
      throw new Error("Failed pattern match at Entities.Enemies line 28, column 1 - line 30, column 1: " + [ _44.constructor.name ]);
  });
  exports["Patrol"] = Patrol;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["makeRegularLevel"] = makeRegularLevel;
  exports["dx"] = dx;
  exports["direction"] = direction;
  exports["invaders"] = invaders;
  exports["eqDirection"] = eqDirection;;
 
})(PS["Entities.Enemies"] = PS["Entities.Enemies"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Prelude = PS["Prelude"];
  var Optic_Core = PS["Optic.Core"];     
  var Handled = (function () {
      function Handled() {

      };
      Handled.value = new Handled();
      return Handled;
  })();
  var New = (function () {
      function New() {

      };
      New.value = new New();
      return New;
  })();
  var InvaderShot = (function () {
      function InvaderShot() {

      };
      InvaderShot.value = new InvaderShot();
      return InvaderShot;
  })();
  var Event = (function () {
      function Event(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Event.create = function (value0) {
          return function (value1) {
              return new Event(value0, value1);
          };
      };
      return Event;
  })();
  var status = Optic_Lens.lens(function (_20) {
      return _20.value1;
  })(function (_21) {
      return function (status$prime) {
          return new Event(_21.value0, status$prime);
      };
  });
  var eqStatus = new Prelude.Eq(function (_22) {
      return function (_23) {
          if (_22 instanceof Handled && _23 instanceof Handled) {
              return true;
          };
          if (_22 instanceof New && _23 instanceof New) {
              return true;
          };
          return false;
      };
  });
  exports["Event"] = Event;
  exports["InvaderShot"] = InvaderShot;
  exports["Handled"] = Handled;
  exports["New"] = New;
  exports["status"] = status;
  exports["eqStatus"] = eqStatus;;
 
})(PS["Entities.Event"] = PS["Entities.Event"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.drawImage = function(ctx) {
      return function(image_source) {
          return function(dx) {
              return function(dy) {
                  return function() {
                      ctx.drawImage(image_source, dx, dy);
                      return ctx;
                  };
              };
          };
      };
  };

 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["drawImage"] = $foreign.drawImage;
  exports["fillText"] = $foreign.fillText;
  exports["setFont"] = $foreign.setFont;
  exports["fillRect"] = $foreign.fillRect;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["getContext2D"] = $foreign.getContext2D;;
 
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Optic_Core = PS["Optic.Core"];     
  var Alive = (function () {
      function Alive() {

      };
      Alive.value = new Alive();
      return Alive;
  })();
  var Player = (function () {
      function Player(value0) {
          this.value0 = value0;
      };
      Player.create = function (value0) {
          return new Player(value0);
      };
      return Player;
  })();
  var y = Optic_Lens.lens(function (_13) {
      return _13.value0.y;
  })(function (_14) {
      return function (y$prime) {
          return new Player((function () {
              var _32 = {};
              for (var _33 in _14.value0) {
                  if (_14.value0.hasOwnProperty(_33)) {
                      _32[_33] = _14.value0[_33];
                  };
              };
              _32.y = y$prime;
              return _32;
          })());
      };
  });
  var x = Optic_Lens.lens(function (_11) {
      return _11.value0.x;
  })(function (_12) {
      return function (x$prime) {
          return new Player((function () {
              var _38 = {};
              for (var _39 in _12.value0) {
                  if (_12.value0.hasOwnProperty(_39)) {
                      _38[_39] = _12.value0[_39];
                  };
              };
              _38.x = x$prime;
              return _38;
          })());
      };
  });
  var status = Optic_Lens.lens(function (_15) {
      return _15.value0.status;
  })(function (_16) {
      return function (status$prime) {
          return new Player((function () {
              var _44 = {};
              for (var _45 in _16.value0) {
                  if (_16.value0.hasOwnProperty(_45)) {
                      _44[_45] = _16.value0[_45];
                  };
              };
              _44.status = status$prime;
              return _44;
          })());
      };
  });
  var makePlayer = function (x_1) {
      return function (y_1) {
          return new Player({
              x: x_1, 
              y: y_1, 
              status: Alive.value
          });
      };
  };
  exports["Player"] = Player;
  exports["Alive"] = Alive;
  exports["makePlayer"] = makePlayer;
  exports["status"] = status;
  exports["y"] = y;
  exports["x"] = x;;
 
})(PS["Entities.Player"] = PS["Entities.Player"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Helpers.Audio

  exports.loadSound = function(url) {
    return function() {
      var newSound = new Audio(url);
      return newSound;
    };
  };

  exports.playSound = function(sound) {
    return function() {
      sound.load();
      sound.play();
    };
  };
 
})(PS["Helpers.Audio"] = PS["Helpers.Audio"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Helpers.Audio"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["playSound"] = $foreign.playSound;
  exports["loadSound"] = $foreign.loadSound;;
 
})(PS["Helpers.Audio"] = PS["Helpers.Audio"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Optic_Core = PS["Optic.Core"];
  var Helpers_Audio = PS["Helpers.Audio"];     
  var Sounds = (function () {
      function Sounds(value0) {
          this.value0 = value0;
      };
      Sounds.create = function (value0) {
          return new Sounds(value0);
      };
      return Sounds;
  })();
  var newPlayerBullet = Optic_Lens.lens(function (_24) {
      return _24.value0.newPlayerBullet;
  })(function (_25) {
      return function (newPlayerBullet$prime) {
          return new Sounds((function () {
              var _62 = {};
              for (var _63 in _25.value0) {
                  if (_25.value0.hasOwnProperty(_63)) {
                      _62[_63] = _25.value0[_63];
                  };
              };
              _62.newPlayerBullet = newPlayerBullet$prime;
              return _62;
          })());
      };
  });
  var loadAllSounds = function __do() {
      var _1 = Helpers_Audio.loadSound("sounds/newPlayerBullet.wav")();
      var _0 = Helpers_Audio.loadSound("sounds/invaderShot.wav")();
      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Sounds({
          newPlayerBullet: _1, 
          invaderShot: _0
      }))();
  };
  var invaderShot = Optic_Lens.lens(function (_26) {
      return _26.value0.invaderShot;
  })(function (_27) {
      return function (invaderShot$prime) {
          return new Sounds((function () {
              var _70 = {};
              for (var _71 in _27.value0) {
                  if (_27.value0.hasOwnProperty(_71)) {
                      _70[_71] = _27.value0[_71];
                  };
              };
              _70.invaderShot = invaderShot$prime;
              return _70;
          })());
      };
  });
  exports["Sounds"] = Sounds;
  exports["loadAllSounds"] = loadAllSounds;
  exports["invaderShot"] = invaderShot;
  exports["newPlayerBullet"] = newPlayerBullet;;
 
})(PS["Entities.Sounds"] = PS["Entities.Sounds"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Helpers.Image

  exports.makeCanvasImageSource = function(url) {
    return function() {
      var newImage = new Image();
      newImage.src = url;
      return newImage;
    };
  };

  exports.getWidth = function(img) {
    return img.width;
  }

  exports.getHeight = function(img) {
    return img.height;
  }
 
})(PS["Helpers.Image"] = PS["Helpers.Image"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var $foreign = PS["Helpers.Image"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var Graphics_Canvas = PS["Graphics.Canvas"];     
  var drawImageCentered = function (ctx) {
      return function (img) {
          return function (x) {
              return function (y) {
                  var w = Data_Int.toNumber($foreign.getWidth(img));
                  var h = Data_Int.toNumber($foreign.getHeight(img));
                  return Graphics_Canvas.drawImage(ctx)(img)(x - 0.5 * w)(y - 0.5 * h);
              };
          };
      };
  };
  exports["drawImageCentered"] = drawImageCentered;
  exports["makeCanvasImageSource"] = $foreign.makeCanvasImageSource;;
 
})(PS["Helpers.Image"] = PS["Helpers.Image"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Optic_Core = PS["Optic.Core"];
  var Helpers_Image = PS["Helpers.Image"];     
  var Sprites = (function () {
      function Sprites(value0) {
          this.value0 = value0;
      };
      Sprites.create = function (value0) {
          return new Sprites(value0);
      };
      return Sprites;
  })();
  var shotInvader = Optic_Lens.lens(function (_57) {
      return _57.value0.shotInvader;
  })(function (_58) {
      return function (shotInvader$prime) {
          return new Sprites((function () {
              var _149 = {};
              for (var _150 in _58.value0) {
                  if (_58.value0.hasOwnProperty(_150)) {
                      _149[_150] = _58.value0[_150];
                  };
              };
              _149.shotInvader = shotInvader$prime;
              return _149;
          })());
      };
  });
  var playerBullet = Optic_Lens.lens(function (_53) {
      return _53.value0.playerBullet;
  })(function (_54) {
      return function (playerBullet$prime) {
          return new Sprites((function () {
              var _155 = {};
              for (var _156 in _54.value0) {
                  if (_54.value0.hasOwnProperty(_156)) {
                      _155[_156] = _54.value0[_156];
                  };
              };
              _155.playerBullet = playerBullet$prime;
              return _155;
          })());
      };
  });
  var player = Optic_Lens.lens(function (_51) {
      return _51.value0.player;
  })(function (_52) {
      return function (player$prime) {
          return new Sprites((function () {
              var _161 = {};
              for (var _162 in _52.value0) {
                  if (_52.value0.hasOwnProperty(_162)) {
                      _161[_162] = _52.value0[_162];
                  };
              };
              _161.player = player$prime;
              return _161;
          })());
      };
  });
  var loadSprites = function __do() {
      var _8 = Helpers_Image.makeCanvasImageSource("images/player.png")();
      var _7 = Helpers_Image.makeCanvasImageSource("images/playerBullet.png")();
      var _6 = Helpers_Image.makeCanvasImageSource("images/invader1.png")();
      var _5 = Helpers_Image.makeCanvasImageSource("images/invader2.png")();
      var _4 = Helpers_Image.makeCanvasImageSource("images/invaderShot.png")();
      var _3 = Helpers_Image.makeCanvasImageSource("images/invaderDead.png")();
      var _2 = Helpers_Image.makeCanvasImageSource("images/life.png")();
      return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Sprites({
          player: _8, 
          playerBullet: _7, 
          invader: [ _6, _5 ], 
          shotInvader: _4, 
          deadInvader: _3, 
          lives: _2
      }))();
  };
  var lives = Optic_Lens.lens(function (_49) {
      return _49.value0.lives;
  })(function (_50) {
      return function (lives$prime) {
          return new Sprites((function () {
              var _174 = {};
              for (var _175 in _50.value0) {
                  if (_50.value0.hasOwnProperty(_175)) {
                      _174[_175] = _50.value0[_175];
                  };
              };
              _174.lives = lives$prime;
              return _174;
          })());
      };
  });
  var invader = Optic_Lens.lens(function (_55) {
      return _55.value0.invader;
  })(function (_56) {
      return function (invader$prime) {
          return new Sprites((function () {
              var _180 = {};
              for (var _181 in _56.value0) {
                  if (_56.value0.hasOwnProperty(_181)) {
                      _180[_181] = _56.value0[_181];
                  };
              };
              _180.invader = invader$prime;
              return _180;
          })());
      };
  });
  var deadInvader = Optic_Lens.lens(function (_59) {
      return _59.value0.deadInvader;
  })(function (_60) {
      return function (deadInvader$prime) {
          return new Sprites((function () {
              var _186 = {};
              for (var _187 in _60.value0) {
                  if (_60.value0.hasOwnProperty(_187)) {
                      _186[_187] = _60.value0[_187];
                  };
              };
              _186.deadInvader = deadInvader$prime;
              return _186;
          })());
      };
  });
  exports["Sprites"] = Sprites;
  exports["loadSprites"] = loadSprites;
  exports["deadInvader"] = deadInvader;
  exports["shotInvader"] = shotInvader;
  exports["invader"] = invader;
  exports["playerBullet"] = playerBullet;
  exports["player"] = player;
  exports["lives"] = lives;;
 
})(PS["Entities.Sprites"] = PS["Entities.Sprites"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Lens = PS["Optic.Lens"];
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Date = PS["Data.Date"];
  var Data_Time = PS["Data.Time"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Bullet = PS["Entities.Bullet"];
  var Entities_Enemies = PS["Entities.Enemies"];
  var Entities_Event = PS["Entities.Event"];
  var Entities_Invader = PS["Entities.Invader"];
  var Entities_Player = PS["Entities.Player"];
  var Entities_Sounds = PS["Entities.Sounds"];
  var Entities_Sprites = PS["Entities.Sprites"];
  var Helpers_Audio = PS["Helpers.Audio"];
  var Data_Const = PS["Data.Const"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Identity = PS["Data.Identity"];
  var Waiting = (function () {
      function Waiting() {

      };
      Waiting.value = new Waiting();
      return Waiting;
  })();
  var Game = (function () {
      function Game(value0) {
          this.value0 = value0;
      };
      Game.create = function (value0) {
          return new Game(value0);
      };
      return Game;
  })();
  var w = Optic_Lens.lens(function (_22) {
      return _22.value0.w;
  })(function (_23) {
      return function (w$prime) {
          return new Game((function () {
              var _56 = {};
              for (var _57 in _23.value0) {
                  if (_23.value0.hasOwnProperty(_57)) {
                      _56[_57] = _23.value0[_57];
                  };
              };
              _56.w = w$prime;
              return _56;
          })());
      };
  });
  var startTime = Optic_Lens.lens(function (_26) {
      return _26.value0.startTime;
  })(function (_27) {
      return function (startTime$prime) {
          return new Game((function () {
              var _62 = {};
              for (var _63 in _27.value0) {
                  if (_27.value0.hasOwnProperty(_63)) {
                      _62[_63] = _27.value0[_63];
                  };
              };
              _62.startTime = startTime$prime;
              return _62;
          })());
      };
  });
  var sprites = Optic_Lens.lens(function (_40) {
      return _40.value0.sprites;
  })(function (_41) {
      return function (sprites$prime) {
          return new Game((function () {
              var _68 = {};
              for (var _69 in _41.value0) {
                  if (_41.value0.hasOwnProperty(_69)) {
                      _68[_69] = _41.value0[_69];
                  };
              };
              _68.sprites = sprites$prime;
              return _68;
          })());
      };
  });
  var sounds = Optic_Lens.lens(function (_42) {
      return _42.value0.sounds;
  })(function (_43) {
      return function (sounds$prime) {
          return new Game((function () {
              var _74 = {};
              for (var _75 in _43.value0) {
                  if (_43.value0.hasOwnProperty(_75)) {
                      _74[_75] = _43.value0[_75];
                  };
              };
              _74.sounds = sounds$prime;
              return _74;
          })());
      };
  });
  var shotInvaderSprite = function (__dict_Functor_0) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_0))(Entities_Sprites.shotInvader(__dict_Functor_0));
  };
  var score = Optic_Lens.lens(function (_28) {
      return _28.value0.score;
  })(function (_29) {
      return function (score$prime) {
          return new Game((function () {
              var _80 = {};
              for (var _81 in _29.value0) {
                  if (_29.value0.hasOwnProperty(_81)) {
                      _80[_81] = _29.value0[_81];
                  };
              };
              _80.score = score$prime;
              return _80;
          })());
      };
  });
  var playerSprite = function (__dict_Functor_1) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_1))(Entities_Sprites.player(__dict_Functor_1));
  };
  var playerBullets = Optic_Lens.lens(function (_34) {
      return _34.value0.playerBullets;
  })(function (_35) {
      return function (playerBullets$prime) {
          return new Game((function () {
              var _86 = {};
              for (var _87 in _35.value0) {
                  if (_35.value0.hasOwnProperty(_87)) {
                      _86[_87] = _35.value0[_87];
                  };
              };
              _86.playerBullets = playerBullets$prime;
              return _86;
          })());
      };
  });
  var playerBulletSprite = function (__dict_Functor_2) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_2))(Entities_Sprites.playerBullet(__dict_Functor_2));
  };
  var player = Optic_Lens.lens(function (_32) {
      return _32.value0.player;
  })(function (_33) {
      return function (player$prime) {
          return new Game((function () {
              var _92 = {};
              for (var _93 in _33.value0) {
                  if (_33.value0.hasOwnProperty(_93)) {
                      _92[_93] = _33.value0[_93];
                  };
              };
              _92.player = player$prime;
              return _92;
          })());
      };
  });
  var playerX = function (__dict_Functor_3) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(player(__dict_Functor_3))(Entities_Player.x(__dict_Functor_3));
  };
  var playerY = function (__dict_Functor_4) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(player(__dict_Functor_4))(Entities_Player.y(__dict_Functor_4));
  };
  var newPlayerBulletSound = function (__dict_Functor_5) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sounds(__dict_Functor_5))(Entities_Sounds.newPlayerBullet(__dict_Functor_5));
  };
  var makeGame = function (w_1) {
      return function (h_1) {
          var player_1 = Entities_Player.makePlayer(0.5 * w_1)(0.9 * h_1);
          return function __do() {
              var _2 = Entities_Sprites.loadSprites();
              var _1 = Entities_Sounds.loadAllSounds();
              var _0 = Data_Date.nowEpochMilliseconds();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(new Game({
                  w: w_1, 
                  h: h_1, 
                  startTime: _0, 
                  status: Waiting.value, 
                  score: 0, 
                  lives: 3, 
                  player: player_1, 
                  playerBullets: [  ], 
                  enemies: Entities_Enemies.makeRegularLevel, 
                  events: [  ], 
                  sprites: _2, 
                  sounds: _1
              }))();
          };
      };
  };
  var lives = Optic_Lens.lens(function (_30) {
      return _30.value0.lives;
  })(function (_31) {
      return function (lives$prime) {
          return new Game((function () {
              var _101 = {};
              for (var _102 in _31.value0) {
                  if (_31.value0.hasOwnProperty(_102)) {
                      _101[_102] = _31.value0[_102];
                  };
              };
              _101.lives = lives$prime;
              return _101;
          })());
      };
  });
  var lifeSprite = function (__dict_Functor_6) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_6))(Entities_Sprites.lives(__dict_Functor_6));
  };
  var invaderSprites = function (__dict_Functor_7) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_7))(Entities_Sprites.invader(__dict_Functor_7));
  };
  var invaderShotSound = function (__dict_Functor_8) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sounds(__dict_Functor_8))(Entities_Sounds.invaderShot(__dict_Functor_8));
  };
  var h = Optic_Lens.lens(function (_24) {
      return _24.value0.h;
  })(function (_25) {
      return function (h$prime) {
          return new Game((function () {
              var _107 = {};
              for (var _108 in _25.value0) {
                  if (_25.value0.hasOwnProperty(_108)) {
                      _107[_108] = _25.value0[_108];
                  };
              };
              _107.h = h$prime;
              return _107;
          })());
      };
  });
  var events = Optic_Lens.lens(function (_38) {
      return _38.value0.events;
  })(function (_39) {
      return function (events$prime) {
          return new Game((function () {
              var _113 = {};
              for (var _114 in _39.value0) {
                  if (_39.value0.hasOwnProperty(_114)) {
                      _113[_114] = _39.value0[_114];
                  };
              };
              _113.events = events$prime;
              return _113;
          })());
      };
  });
  var enemies = Optic_Lens.lens(function (_36) {
      return _36.value0.enemies;
  })(function (_37) {
      return function (enemies$prime) {
          return new Game((function () {
              var _119 = {};
              for (var _120 in _37.value0) {
                  if (_37.value0.hasOwnProperty(_120)) {
                      _119[_120] = _37.value0[_120];
                  };
              };
              _119.enemies = enemies$prime;
              return _119;
          })());
      };
  });
  var invaders = function (__dict_Functor_9) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(enemies(__dict_Functor_9))(Entities_Enemies.invaders(__dict_Functor_9));
  };
  var patrolDirection = function (__dict_Functor_10) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(enemies(__dict_Functor_10))(Entities_Enemies.direction(__dict_Functor_10));
  };
  var patrolDx = function (__dict_Functor_11) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(enemies(__dict_Functor_11))(Entities_Enemies.dx(__dict_Functor_11));
  };
  var deadInvaderSprite = function (__dict_Functor_12) {
      return Optic_Core[".."](Prelude.semigroupoidFn)(sprites(__dict_Functor_12))(Entities_Sprites.deadInvader(__dict_Functor_12));
  };
  var createPlayerBullet = function (gRef) {
      return function __do() {
          var _3 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var newPlayerBullet = Entities_Bullet.makePlayerBullet(Optic_Getter["^."](_3)(playerX(Data_Const.functorConst)))(Optic_Getter["^."](_3)(playerY(Data_Const.functorConst)));
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Optic_Setter["%~"](Data_Profunctor.profunctorFn)(playerBullets(Data_Identity.functorIdentity))(Data_Array.cons(newPlayerBullet))(g_1);
              });
          })()();
      };
  };
  exports["Game"] = Game;
  exports["Waiting"] = Waiting;
  exports["createPlayerBullet"] = createPlayerBullet;
  exports["makeGame"] = makeGame;
  exports["invaderShotSound"] = invaderShotSound;
  exports["newPlayerBulletSound"] = newPlayerBulletSound;
  exports["deadInvaderSprite"] = deadInvaderSprite;
  exports["shotInvaderSprite"] = shotInvaderSprite;
  exports["invaderSprites"] = invaderSprites;
  exports["playerBulletSprite"] = playerBulletSprite;
  exports["playerSprite"] = playerSprite;
  exports["lifeSprite"] = lifeSprite;
  exports["patrolDx"] = patrolDx;
  exports["patrolDirection"] = patrolDirection;
  exports["invaders"] = invaders;
  exports["playerY"] = playerY;
  exports["playerX"] = playerX;
  exports["sounds"] = sounds;
  exports["sprites"] = sprites;
  exports["events"] = events;
  exports["enemies"] = enemies;
  exports["playerBullets"] = playerBullets;
  exports["player"] = player;
  exports["lives"] = lives;
  exports["score"] = score;
  exports["startTime"] = startTime;
  exports["h"] = h;
  exports["w"] = w;;
 
})(PS["Entities.Game"] = PS["Entities.Game"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];     
  var $amp = Prelude.flip(Prelude["$"]);
  exports["&"] = $amp;;
 
})(PS["Helpers.Lens"] = PS["Helpers.Lens"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Tuple = PS["Data.Tuple"];
  var $$Math = PS["Math"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Bullet = PS["Entities.Bullet"];
  var Entities_Game = PS["Entities.Game"];
  var Entities_Event = PS["Entities.Event"];
  var Entities_Invader = PS["Entities.Invader"];
  var Helpers_Lens = PS["Helpers.Lens"];
  var Data_Const = PS["Data.Const"];
  var Data_Identity = PS["Data.Identity"];     
  var Shootable = function (isShot) {
      this.isShot = isShot;
  };
  var shootableInvader = new Shootable(function (i) {
      return function (b) {
          return Prelude["=="](Entities_Invader.eqStatus)(Optic_Getter["^."](i)(Entities_Invader.status(Data_Const.functorConst)))(Entities_Invader.Alive.value) && ($$Math.abs(Optic_Getter["^."](i)(Entities_Invader.x(Data_Const.functorConst)) - Optic_Getter["^."](b)(Entities_Bullet.x(Data_Const.functorConst))) < 25.0 && $$Math.abs(Optic_Getter["^."](i)(Entities_Invader.y(Data_Const.functorConst)) - Optic_Getter["^."](b)(Entities_Bullet.y(Data_Const.functorConst))) < 25.0);
      };
  });
  var isShot = function (dict) {
      return dict.isShot;
  };
  var computeNewEvents = function (currEvents) {
      return function (invaderCount) {
          if (invaderCount > 0) {
              return Data_Array.cons(new Entities_Event.Event(Entities_Event.InvaderShot.value, Entities_Event.New.value))(currEvents);
          };
          if (Prelude.otherwise) {
              return currEvents;
          };
          throw new Error("Failed pattern match at Handlers.Collision line 32, column 1 - line 33, column 1: " + [ currEvents.constructor.name, invaderCount.constructor.name ]);
      };
  };
  var checkInvadersShot = function (gRef) {
      return function __do() {
          var _6 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var currInvaders = Optic_Getter["^."](_6)(Entities_Game.invaders(Data_Const.functorConst));
              var currEvents = Optic_Getter["^."](_6)(Entities_Game.events(Data_Const.functorConst));
              var currBullets = Optic_Getter["^."](_6)(Entities_Game.playerBullets(Data_Const.functorConst));
              var collisions = Data_Array.filter(function (_44) {
                  return isShot(shootableInvader)(_44.value0)(_44.value1);
              })(Prelude.bind(Prelude.bindArray)(currInvaders)(function (_5) {
                  return Prelude.bind(Prelude.bindArray)(currBullets)(function (_4) {
                      return Prelude["return"](Prelude.applicativeArray)(new Data_Tuple.Tuple(_5, _4));
                  });
              }));
              var deadBullets = Prelude.map(Prelude.functorArray)(function (_46) {
                  return _46.value1;
              })(collisions);
              var newBullets = Data_Array["\\\\"](Entities_Bullet.eqBullet)(currBullets)(deadBullets);
              var shotInvaders = Data_Array.nub(Entities_Invader.eqInvader)(Prelude.map(Prelude.functorArray)(function (_45) {
                  return Optic_Setter[".~"](Entities_Invader.status(Data_Identity.functorIdentity))(Entities_Invader.Shot.value)(_45.value0);
              })(collisions));
              var newEvents = computeNewEvents(currEvents)(Data_Array.length(shotInvaders));
              var newPoints = 100 * Data_Array.length(shotInvaders) | 0;
              var otherInvaders = Data_Array["\\\\"](Entities_Invader.eqInvader)(currInvaders)(shotInvaders);
              var newInvaders = Data_Array.concat([ otherInvaders, shotInvaders ]);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Helpers_Lens["&"](Helpers_Lens["&"](Helpers_Lens["&"](Optic_Setter[".~"](Entities_Game.invaders(Data_Identity.functorIdentity))(newInvaders)(g_1))(Optic_Setter[".~"](Entities_Game.playerBullets(Data_Identity.functorIdentity))(newBullets)))(Optic_Setter["+~"](Prelude.semiringInt)(Entities_Game.score(Data_Identity.functorIdentity))(newPoints)))(Optic_Setter[".~"](Entities_Game.events(Data_Identity.functorIdentity))(newEvents));
              });
          })()();
      };
  };
  exports["Shootable"] = Shootable;
  exports["checkInvadersShot"] = checkInvadersShot;
  exports["computeNewEvents"] = computeNewEvents;
  exports["isShot"] = isShot;
  exports["shootableInvader"] = shootableInvader;;
 
})(PS["Handlers.Collision"] = PS["Handlers.Collision"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Game = PS["Entities.Game"];
  var Helpers_Audio = PS["Helpers.Audio"];
  var Data_Const = PS["Data.Const"];     
  var playNewPlayerBulletSound = function (gRef) {
      return function __do() {
          var _13 = Control_Monad_ST.readSTRef(gRef)();
          return Helpers_Audio.playSound(Optic_Getter["^."](_13)(Entities_Game.newPlayerBulletSound(Data_Const.functorConst)))();
      };
  };
  var playInvaderShotSound = function (gRef) {
      return function __do() {
          var _14 = Control_Monad_ST.readSTRef(gRef)();
          return Helpers_Audio.playSound(Optic_Getter["^."](_14)(Entities_Game.invaderShotSound(Data_Const.functorConst)))();
      };
  };
  exports["playInvaderShotSound"] = playInvaderShotSound;
  exports["playNewPlayerBulletSound"] = playNewPlayerBulletSound;;
 
})(PS["Handlers.Sound"] = PS["Handlers.Sound"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Event = PS["Entities.Event"];
  var Entities_Game = PS["Entities.Game"];
  var Handlers_Sound = PS["Handlers.Sound"];
  var Data_Const = PS["Data.Const"];
  var Data_Identity = PS["Data.Identity"];     
  var processEvent = function (_51) {
      return function (gRef) {
          if (_51.value0 instanceof Entities_Event.InvaderShot) {
              return Handlers_Sound.playInvaderShotSound(gRef);
          };
          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
      };
  };
  var processEvents = function (gRef) {
      return function __do() {
          var _16 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var currEvents = Optic_Getter["^."](_16)(Entities_Game.events(Data_Const.functorConst));
              var newEvents = Prelude.map(Prelude.functorArray)(function (e) {
                  return Optic_Setter[".~"](Entities_Event.status(Data_Identity.functorIdentity))(Entities_Event.Handled.value)(e);
              })(currEvents);
              var unhandledEvents = Data_Array.filter(function (e) {
                  return Prelude["=="](Entities_Event.eqStatus)(Optic_Getter["^."](e)(Entities_Event.status(Data_Const.functorConst)))(Entities_Event.New.value);
              })(currEvents);
              return function __do() {
                  Control_Monad_Eff.foreachE(unhandledEvents)(function (event) {
                      return function __do() {
                          processEvent(event)(gRef)();
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
                      };
                  })();
                  Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                      return Optic_Setter[".~"](Entities_Game.events(Data_Identity.functorIdentity))(newEvents)(g_1);
                  })();
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
              };
          })()();
      };
  };
  var clearHandledEvents = function (gRef) {
      return function __do() {
          var _15 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var currEvents = Optic_Getter["^."](_15)(Entities_Game.events(Data_Const.functorConst));
              var unhandledEvents = Data_Array.filter(function (e) {
                  return Prelude["=="](Entities_Event.eqStatus)(Optic_Getter["^."](e)(Entities_Event.status(Data_Const.functorConst)))(Entities_Event.New.value);
              })(currEvents);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Optic_Setter[".~"](Entities_Game.events(Data_Identity.functorIdentity))(unhandledEvents)(g_1);
              });
          })()();
      };
  };
  exports["processEvents"] = processEvents;
  exports["clearHandledEvents"] = clearHandledEvents;
  exports["processEvent"] = processEvent;;
 
})(PS["Handlers.Event"] = PS["Handlers.Event"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Optic_Core = PS["Optic.Core"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Entities_Game = PS["Entities.Game"];
  var Handlers_Sound = PS["Handlers.Sound"];
  var Data_Identity = PS["Data.Identity"];     
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var SpaceBar = (function () {
      function SpaceBar() {

      };
      SpaceBar.value = new SpaceBar();
      return SpaceBar;
  })();
  var Other = (function () {
      function Other() {

      };
      Other.value = new Other();
      return Other;
  })();
  var movePlayer = function (key) {
      return function (gRef) {
          var dx = (function () {
              if (key instanceof Left) {
                  return -10.0;
              };
              if (key instanceof Right) {
                  return 10.0;
              };
              return 0.0;
          })();
          return Control_Monad_ST.modifySTRef(gRef)(function (g) {
              return Optic_Setter["+~"](Prelude.semiringNumber)(Entities_Game.playerX(Data_Identity.functorIdentity))(dx)(g);
          });
      };
  };
  var respondToKey = function (_52) {
      return function (gRef) {
          if (_52 instanceof Left) {
              return movePlayer(Left.value)(gRef);
          };
          if (_52 instanceof Right) {
              return movePlayer(Right.value)(gRef);
          };
          if (_52 instanceof SpaceBar) {
              return function __do() {
                  Handlers_Sound.playNewPlayerBulletSound(gRef)();
                  return Entities_Game.createPlayerBullet(gRef)();
              };
          };
          return Control_Monad_ST.readSTRef(gRef);
      };
  };
  var eventToKeyboardEvent = Unsafe_Coerce.unsafeCoerce;
  var onKeydown = function (gRef) {
      return DOM_Event_EventTarget.eventListener(function (evt) {
          var keyboardEvent = eventToKeyboardEvent(evt);
          var key = (function () {
              if (keyboardEvent.keyCode === 32) {
                  return SpaceBar.value;
              };
              if (keyboardEvent.keyCode === 37) {
                  return Left.value;
              };
              if (keyboardEvent.keyCode === 39) {
                  return Right.value;
              };
              return Other.value;
          })();
          return respondToKey(key)(gRef);
      });
  };
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["SpaceBar"] = SpaceBar;
  exports["Other"] = Other;
  exports["onKeydown"] = onKeydown;
  exports["eventToKeyboardEvent"] = eventToKeyboardEvent;
  exports["respondToKey"] = respondToKey;
  exports["movePlayer"] = movePlayer;;
 
})(PS["Handlers.Keyboard"] = PS["Handlers.Keyboard"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Bullet = PS["Entities.Bullet"];
  var Entities_Enemies = PS["Entities.Enemies"];
  var Entities_Game = PS["Entities.Game"];
  var Entities_Invader = PS["Entities.Invader"];
  var Helpers_Lens = PS["Helpers.Lens"];
  var Data_Const = PS["Data.Const"];
  var Data_Identity = PS["Data.Identity"];     
  var movePlayerBullets = function (gRef) {
      return function __do() {
          var _7 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var playerBullets = Optic_Getter["^."](_7)(Entities_Game.playerBullets(Data_Const.functorConst));
              var newPlayerBullets = Prelude.map(Prelude.functorArray)(function (b) {
                  return Optic_Setter["-~"](Prelude.ringNumber)(Entities_Bullet.y(Data_Identity.functorIdentity))(20.0)(b);
              })(playerBullets);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Optic_Setter[".~"](Entities_Game.playerBullets(Data_Identity.functorIdentity))(newPlayerBullets)(g_1);
              });
          })()();
      };
  };
  var moveInvader = function (invader) {
      return function (newDx) {
          return function (newDy) {
              return Helpers_Lens["&"](Optic_Setter["+~"](Prelude.semiringNumber)(Entities_Invader.x(Data_Identity.functorIdentity))(newDx)(invader))(Optic_Setter["+~"](Prelude.semiringNumber)(Entities_Invader.y(Data_Identity.functorIdentity))(newDy));
          };
      };
  };
  var isPastMargins = function (minX) {
      return function (maxX) {
          return function (w) {
              return 50.0 > minX || w - 50.0 < maxX;
          };
      };
  };
  var computeDy = function (newDir) {
      return function (currDir) {
          if (Prelude["=="](Entities_Enemies.eqDirection)(newDir)(currDir)) {
              return 0.0;
          };
          if (Prelude.otherwise) {
              return 32.0;
          };
          throw new Error("Failed pattern match at Handlers.Motion line 60, column 1 - line 63, column 1: " + [ newDir.constructor.name, currDir.constructor.name ]);
      };
  };
  var computeDx = function (newDir) {
      return function (currDir) {
          return function (currDx) {
              if (Prelude["=="](Entities_Enemies.eqDirection)(newDir)(currDir)) {
                  return currDx;
              };
              if (Prelude.otherwise) {
                  return -currDx;
              };
              throw new Error("Failed pattern match at Handlers.Motion line 53, column 1 - line 57, column 1: " + [ newDir.constructor.name, currDir.constructor.name, currDx.constructor.name ]);
          };
      };
  };
  var computeDirection = function (currDir) {
      return function (w) {
          return function (_47) {
              if (_47.length === 0) {
                  return currDir;
              };
              var go = function (_48) {
                  return function (_49) {
                      if (_48 instanceof Entities_Enemies.Left && _49) {
                          return Entities_Enemies.Right.value;
                      };
                      if (_48 instanceof Entities_Enemies.Right && _49) {
                          return Entities_Enemies.Left.value;
                      };
                      return _48;
                  };
              };
              var t = Data_Maybe_Unsafe.fromJust(Data_Array.tail(_47));
              var h = Data_Maybe_Unsafe.fromJust(Data_Array.head(_47));
              var maxX = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (a) {
                  return function (i) {
                      return $$Math.max(a)(Optic_Getter["^."](i)(Entities_Invader.x(Data_Const.functorConst)));
                  };
              })(Optic_Getter["^."](h)(Entities_Invader.x(Data_Const.functorConst)))(t);
              var minX = Data_Foldable.foldl(Data_Foldable.foldableArray)(function (a) {
                  return function (i) {
                      return $$Math.min(a)(Optic_Getter["^."](i)(Entities_Invader.x(Data_Const.functorConst)));
                  };
              })(Optic_Getter["^."](h)(Entities_Invader.x(Data_Const.functorConst)))(t);
              var pastMargins = isPastMargins(minX)(maxX)(w);
              return go(currDir)(pastMargins);
          };
      };
  };
  var movePatrol = function (gRef) {
      return function __do() {
          var _8 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var w = Optic_Getter["^."](_8)(Entities_Game.w(Data_Const.functorConst));
              var currInvaders = Optic_Getter["^."](_8)(Entities_Game.invaders(Data_Const.functorConst));
              var currDx = Optic_Getter["^."](_8)(Entities_Game.patrolDx(Data_Const.functorConst));
              var currDir = Optic_Getter["^."](_8)(Entities_Game.patrolDirection(Data_Const.functorConst));
              var newDir = computeDirection(currDir)(w)(currInvaders);
              var newDx = computeDx(newDir)(currDir)(currDx);
              var newDy = computeDy(newDir)(currDir);
              var newInvaders = Prelude.map(Prelude.functorArray)(function (i) {
                  return moveInvader(i)(newDx)(newDy);
              })(currInvaders);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Helpers_Lens["&"](Helpers_Lens["&"](Optic_Setter[".~"](Entities_Game.invaders(Data_Identity.functorIdentity))(newInvaders)(g_1))(Optic_Setter[".~"](Entities_Game.patrolDirection(Data_Identity.functorIdentity))(newDir)))(Optic_Setter[".~"](Entities_Game.patrolDx(Data_Identity.functorIdentity))(newDx));
              });
          })()();
      };
  };
  exports["movePatrol"] = movePatrol;
  exports["moveInvader"] = moveInvader;
  exports["computeDy"] = computeDy;
  exports["computeDx"] = computeDx;
  exports["computeDirection"] = computeDirection;
  exports["isPastMargins"] = isPastMargins;
  exports["movePlayerBullets"] = movePlayerBullets;;
 
})(PS["Handlers.Motion"] = PS["Handlers.Motion"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Data_Date = PS["Data.Date"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Time = PS["Data.Time"];
  var DOM_Timer = PS["DOM.Timer"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var $$Math = PS["Math"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Bullet = PS["Entities.Bullet"];
  var Entities_Game = PS["Entities.Game"];
  var Entities_Invader = PS["Entities.Invader"];
  var Helpers_Image = PS["Helpers.Image"];
  var Data_Const = PS["Data.Const"];     
  var renderScore = function (ctx) {
      return function (g) {
          return function __do() {
              Graphics_Canvas.setFillStyle("#7700FF")(ctx)();
              Graphics_Canvas.setFont("32pt Courier")(ctx)();
              Graphics_Canvas.fillText(ctx)(Prelude.show(Prelude.showInt)(Optic_Getter["^."](g)(Entities_Game.score(Data_Const.functorConst))))(50.0)(40.0)();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
          };
      };
  };
  var renderPlayerBullets = function (ctx) {
      return function (g) {
          return function __do() {
              Control_Monad_Eff.foreachE(Optic_Getter["^."](g)(Entities_Game.playerBullets(Data_Const.functorConst)))(function (b) {
                  return function __do() {
                      Helpers_Image.drawImageCentered(ctx)(Optic_Getter["^."](g)(Entities_Game.playerBulletSprite(Data_Const.functorConst)))(Optic_Getter["^."](b)(Entities_Bullet.x(Data_Const.functorConst)))(Optic_Getter["^."](b)(Entities_Bullet.y(Data_Const.functorConst)))();
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
                  };
              })();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
          };
      };
  };
  var renderPlayer = function (ctx) {
      return function (g) {
          return function __do() {
              Helpers_Image.drawImageCentered(ctx)(Optic_Getter["^."](g)(Entities_Game.playerSprite(Data_Const.functorConst)))(Optic_Getter["^."](g)(Entities_Game.playerX(Data_Const.functorConst)))(Optic_Getter["^."](g)(Entities_Game.playerY(Data_Const.functorConst)))();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
          };
      };
  };
  var renderLives = function (ctx) {
      return function (g) {
          var lives = Optic_Getter["^."](g)(Entities_Game.lives(Data_Const.functorConst));
          return function __do() {
              Control_Monad_Eff.forE(0.0)(Data_Int.toNumber(lives))(function (i) {
                  return function __do() {
                      Helpers_Image.drawImageCentered(ctx)(Optic_Getter["^."](g)(Entities_Game.lifeSprite(Data_Const.functorConst)))(Optic_Getter["^."](g)(Entities_Game.w(Data_Const.functorConst)) - i * 32.0 - 50.0)(30.0)();
                      return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
                  };
              })();
              return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
          };
      };
  };
  var renderEnemies = function (ctx) {
      return function (g) {
          return function __do() {
              var _9 = Data_Date.nowEpochMilliseconds();
              return (function () {
                  var shotInvaderSprite = Optic_Getter["^."](g)(Entities_Game.shotInvaderSprite(Data_Const.functorConst));
                  var secondsIntoGame = Data_Time.toSeconds(Data_Time.timeValueMilliseconds)(Prelude["-"](Data_Time.ringMilliseconds)(_9)(Optic_Getter["^."](g)(Entities_Game.startTime(Data_Const.functorConst))));
                  var invaders = Optic_Getter["^."](g)(Entities_Game.invaders(Data_Const.functorConst));
                  var invaderSprites = Optic_Getter["^."](g)(Entities_Game.invaderSprites(Data_Const.functorConst));
                  var deadInvaderSprite = Optic_Getter["^."](g)(Entities_Game.deadInvaderSprite(Data_Const.functorConst));
                  var chooseSprite = function (status) {
                      return function (_50) {
                          return function (idx) {
                              if (status instanceof Entities_Invader.Alive) {
                                  var idx$prime = Data_Int.toNumber(idx);
                                  var spriteIdx = Data_Maybe_Unsafe.fromJust(Data_Int.fromNumber($$Math.floor(idx$prime + _50 * 2.0))) % 2;
                                  return Data_Maybe_Unsafe.fromJust(Data_Array["!!"](invaderSprites)(spriteIdx));
                              };
                              if (status instanceof Entities_Invader.Shot) {
                                  return shotInvaderSprite;
                              };
                              if (status instanceof Entities_Invader.Dead) {
                                  return deadInvaderSprite;
                              };
                              throw new Error("Failed pattern match at Handlers.Rendering line 70, column 1 - line 75, column 1: " + [ status.constructor.name ]);
                          };
                      };
                  };
                  return Control_Monad_Eff.foreachE(invaders)(function (i) {
                      var sprite = chooseSprite(Optic_Getter["^."](i)(Entities_Invader.status(Data_Const.functorConst)))(secondsIntoGame)(Optic_Getter["^."](i)(Entities_Invader.idx(Data_Const.functorConst)));
                      return function __do() {
                          Helpers_Image.drawImageCentered(ctx)(sprite)(Optic_Getter["^."](i)(Entities_Invader.x(Data_Const.functorConst)))(Optic_Getter["^."](i)(Entities_Invader.y(Data_Const.functorConst)))();
                          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
                      };
                  });
              })()();
          };
      };
  };
  var render = function (gRef) {
      return function __do() {
          var _12 = Graphics_Canvas.getCanvasElementById("canvas")();
          if (_12 instanceof Data_Maybe.Just) {
              var _11 = Graphics_Canvas.getContext2D(_12.value0)();
              var _10 = Control_Monad_ST.readSTRef(gRef)();
              Graphics_Canvas.setFillStyle("#000000")(_11)();
              Graphics_Canvas.fillRect(_11)({
                  x: 0.0, 
                  y: 0.0, 
                  w: Optic_Getter["^."](_10)(Entities_Game.w(Data_Const.functorConst)), 
                  h: Optic_Getter["^."](_10)(Entities_Game.h(Data_Const.functorConst))
              })();
              return Control_Monad_Eff.foreachE([ renderScore, renderLives, renderEnemies, renderPlayer, renderPlayerBullets ])(function (f) {
                  return f(_11)(_10);
              })();
          };
          throw new Error("Failed pattern match at Handlers.Rendering line 124, column 1 - line 128, column 1: " + [ _12.constructor.name ]);
      };
  };
  exports["render"] = render;
  exports["renderPlayerBullets"] = renderPlayerBullets;
  exports["renderPlayer"] = renderPlayer;
  exports["renderEnemies"] = renderEnemies;
  exports["renderLives"] = renderLives;
  exports["renderScore"] = renderScore;;
 
})(PS["Handlers.Rendering"] = PS["Handlers.Rendering"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Optic_Getter = PS["Optic.Getter"];
  var Optic_Setter = PS["Optic.Setter"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Array = PS["Data.Array"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Bullet = PS["Entities.Bullet"];
  var Entities_Game = PS["Entities.Game"];
  var Entities_Invader = PS["Entities.Invader"];
  var Handlers_Collision = PS["Handlers.Collision"];
  var Handlers_Motion = PS["Handlers.Motion"];
  var Data_Const = PS["Data.Const"];
  var Data_Identity = PS["Data.Identity"];     
  var updateInvaderStatus = function (gRef) {
      return function __do() {
          var _17 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var newStatus = function (status) {
                  if (status instanceof Entities_Invader.Shot) {
                      return Entities_Invader.Dead.value;
                  };
                  return status;
              };
              var invaders = Optic_Getter["^."](_17)(Entities_Game.invaders(Data_Const.functorConst));
              var remainingInvaders = Data_Array.filter(function (i) {
                  return Prelude["/="](Entities_Invader.eqStatus)(Optic_Getter["^."](i)(Entities_Invader.status(Data_Const.functorConst)))(Entities_Invader.Dead.value);
              })(invaders);
              var newInvaders = Prelude.map(Prelude.functorArray)(function (i) {
                  return Optic_Setter[".~"](Entities_Invader.status(Data_Identity.functorIdentity))(newStatus(Optic_Getter["^."](i)(Entities_Invader.status(Data_Const.functorConst))))(i);
              })(remainingInvaders);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Optic_Setter[".~"](Entities_Game.invaders(Data_Identity.functorIdentity))(newInvaders)(g_1);
              });
          })()();
      };
  };
  var removeOffscreenPlayerBullets = function (gRef) {
      return function __do() {
          var _18 = Control_Monad_ST.readSTRef(gRef)();
          return (function () {
              var playerBullets = Optic_Getter["^."](_18)(Entities_Game.playerBullets(Data_Const.functorConst));
              var newPlayerBullets = Data_Array.filter(function (b) {
                  return Optic_Getter["^."](b)(Entities_Bullet.y(Data_Const.functorConst)) > -10.0;
              })(playerBullets);
              return Control_Monad_ST.modifySTRef(gRef)(function (g_1) {
                  return Optic_Setter[".~"](Entities_Game.playerBullets(Data_Identity.functorIdentity))(newPlayerBullets)(g_1);
              });
          })()();
      };
  };
  var update = function (gRef) {
      return function __do() {
          Handlers_Collision.checkInvadersShot(gRef)();
          Handlers_Motion.movePlayerBullets(gRef)();
          Handlers_Motion.movePatrol(gRef)();
          updateInvaderStatus(gRef)();
          removeOffscreenPlayerBullets(gRef)();
          return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit)();
      };
  };
  exports["update"] = update;
  exports["removeOffscreenPlayerBullets"] = removeOffscreenPlayerBullets;
  exports["updateInvaderStatus"] = updateInvaderStatus;;
 
})(PS["Update"] = PS["Update"] || {});
(function(exports) {
  // Generated by psc version 0.7.4.1
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Date = PS["Data.Date"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_Timer = PS["DOM.Timer"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Optic_Core = PS["Optic.Core"];
  var Entities_Game = PS["Entities.Game"];
  var Handlers_Event = PS["Handlers.Event"];
  var Handlers_Keyboard = PS["Handlers.Keyboard"];
  var Handlers_Rendering = PS["Handlers.Rendering"];
  var Update = PS["Update"];     
  var gameLoop = function (gRef) {
      return DOM_Timer.timeout(50)(function __do() {
          Handlers_Rendering.render(gRef)();
          Handlers_Event.processEvents(gRef)();
          Handlers_Event.clearHandledEvents(gRef)();
          return gameLoop(gRef)();
      });
  };
  var main = function __do() {
      var _21 = DOM_HTML.window();
      var _20 = Entities_Game.makeGame(800.0)(750.0)();
      var _19 = Control_Monad_ST.newSTRef(_20)();
      DOM_Event_EventTarget.addEventListener("keydown")(Handlers_Keyboard.onKeydown(_19))(false)(DOM_HTML_Types.windowToEventTarget(_21))();
      DOM_Timer.interval(50)(Update.update(_19))();
      return gameLoop(_19)();
  };
  exports["main"] = main;
  exports["gameLoop"] = gameLoop;;
 
})(PS["Main"] = PS["Main"] || {});

PS["Main"].main();
